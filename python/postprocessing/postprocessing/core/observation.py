import os
import numpy as np
import pickle
import logging as log
import time

from beam import Beam
from configuration.application import config


class Observation:
    """
    The Observation Model encodes the properties of an observation campaign. Multiple Beam objects are associated with
    each Observation object.
    """

    def __init__(self, observation_name, data_set_name):
        """
        Initialisation of the Observation object.

        :param observation_name: The name of the observation
        :param data_set_name: The data_set name from which the beam data will be retrieved
        :return: void
        """
        self.name = observation_name

        # Read the data set generated by the backend
        self.data_set = DataSet(self, data_set_name)

        log.info('Extracting beam data from data set %s', data_set_name)
        self.beams = self.data_set.get_beams()


class DataSet:
    """
    The DataSet class encapsulates the logic for reading and creating the beam data from the data set
    that was generated by the PyBirales Backend
    """
    config_ext = '.dat.pkl'
    data_set_ext = '.dat'

    def __init__(self, observation, data_set_name):
        self.observation = observation
        self.name = data_set_name
        self.data_file_path = self._get_data_file_path(self.observation.name, data_set_name)
        self.config_file_path = self._get_config_file_path(self.observation.name, data_set_name)

        self.config = self._init_data_set_config(self.config_file_path)
        self.n_beams = self.config['nbeams']
        self.n_channels = self.config['nchans']

    def _get_data_file_path(self, observation_name, data_set_name):
        base_path = config.get('io', 'DATA_FILE_PATH')
        return os.path.join(base_path, observation_name, data_set_name, data_set_name + self.data_set_ext)

    def _get_config_file_path(self, observation_name, data_set_name):
        base_path = config.get('io', 'DATA_FILE_PATH')
        return os.path.join(base_path, observation_name, data_set_name, data_set_name + self.config_ext)

    @staticmethod
    def _read_data_set(data_set_file_path, n_beams, n_channels):
        """
        Read beam data from the data_set file associated with this observation
        :param n_beams: The number of beams
        :param n_channels: The number of channels
        :return: The processed beam data
        """
        log.info('Reading data set at %s', data_set_file_path)
        start = time.time()
        if os.path.isfile(data_set_file_path):
            data = np.fromfile(data_set_file_path, dtype=np.dtype('f'))
            n_samples = len(data) / (n_beams * n_channels * 1.)
            data = np.reshape(data, (n_samples, n_channels, n_beams))

            log.info('Data set data loaded in %s seconds', DataSet._time_taken(start))
            return data

        raise IOError('Data set was not found at ' + data_set_file_path)

    def get_beams(self):
        """
        Create and return a list of Beam objects from the beam data.

        :return: A list of Beams extracted from the data set data
        """

        # Read the data set data
        data_set_data = self._read_data_set(self.data_file_path, self.n_beams, self.n_channels)

        # todo - check how beam attributes have to be determined
        beams = []
        for n_beam in range(0, self.n_beams):
            log.info('Generating beam %s from data set %s', n_beam, self.name)
            beam = Beam(beam_id=n_beam,
                        dec=0.0,
                        ra=0.0,
                        ha=0.0,
                        top_frequency=0.0,
                        frequency_offset=0.0,
                        data_set=self, beam_data=data_set_data)

            beams.append(beam)

        return beams

    @staticmethod
    def _init_data_set_config(config_file_path):
        """
        Configure this observation with the settings of the pickle file in the data_set
        :param config_file_path: The file path of where the data set configuration is located
        :return:
        """

        if os.path.isfile(config_file_path):
            data_set_config = pickle.load(open(config_file_path, "rb"))
            # todo - change these or remove
            # todo - validate settings read from pickle
            data_set_config['n_sub_channels'] = data_set_config['nchans']
            data_set_config['sampling_rate'] = data_set_config['sampling_time']
            data_set_config['f_ch1'] = data_set_config['start_center_frequency']
            data_set_config['f_off'] = data_set_config['channel_bandwidth']

            return data_set_config

        raise IOError('Config file was not found at' + config_file_path)

    @staticmethod
    def _time_taken(start):
        time_taken = time.time() - start
        return round(time_taken, 2)
